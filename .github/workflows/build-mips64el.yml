---
name: "Build mips64el"

env:
  sample: mips64-unknown-linux-gnu
  CONFIGURATION: "repos.json"
  #OUT_DIR: "out"

on:
  push:
    tags:
      - "v*-rev*"
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      sample: ${{ env.sample }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Detect-versions:
    needs: [Set-repos, ]
    # uses: ./.github/workflows/s1-detect-versions.yml
    #   Must remove runs-on labels since
    #   Can't find 'action.yml'
    #   Did you forget to run actions/checkout before running your local action?
    #   even if add actions/checkout to here
    #   https://stackoverflow.com/questions/77373271/in-github-actions-how-can-you-pass-outputs-from-a-local-action
    # so moved ./.github/workflows/s1-detect-versions.yml to ./.github/actions/s1-detect-versions/action.yml
    runs-on: ubuntu-latest
    outputs:
      ctVer:   ${{ steps.s1-detect-versions.outputs.ctVer }}
      gccVer:  ${{ steps.s1-detect-versions.outputs.gccVer }}
      gmpVer:  ${{ steps.s1-detect-versions.outputs.gmpVer }}
      mpcVer:  ${{ steps.s1-detect-versions.outputs.mpcVer }}
      mpfrVer: ${{ steps.s1-detect-versions.outputs.mpfrVer }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/s1-detect-versions
        id: s1-detect-versions
        with:
          sample: >-
            [
              "${{ needs.Set-repos.outputs.sample }}"
            ]
          repos: "${{ needs.Set-repos.outputs.repos }}"

  Install-crosstool:
    needs: [Set-repos, Detect-versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/s2-install-crosstool-msys2
        id: s2-install-crosstool-msys2
        with:
          sample: >-
            [
              "${{ needs.Set-repos.outputs.sample }}"
            ]
          repos: "${{ needs.Set-repos.outputs.repos }}"
          dryrun: true

  Build-toolchain:
    needs: [Set-repos, Detect-versions, Install-crosstool]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/s3-build-toolchains-msys2
        id: s3-build-toolchains-msys2
        with:
          sample: >-
            [
              "${{ needs.Set-repos.outputs.sample }}"
            ]
          repos: "${{ needs.Set-repos.outputs.repos }}"
          dryrun: true

  Release:
    needs: [Set-repos, Detect-versions, Build-toolchain]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
    steps:
      - name: generate release info
        env:
          ctVer:   ${{ needs.Detect-versions.outputs.ctVer }}
          gccVer:  ${{ needs.Detect-versions.outputs.gccVer }}
          gmpVer:  ${{ needs.Detect-versions.outputs.gmpVer }}
          mpcVer:  ${{ needs.Detect-versions.outputs.mpcVer }}
          mpfrVer: ${{ needs.Detect-versions.outputs.mpfrVer }}
        run:
          echo "::notice ctVer=$ctVer"
          echo "::notice gccVer=$gccVer"
          echo "::notice gmpVer=$gmpVer"
          echo "::notice mpcVer=$mpcVer"
          echo "::notice mpfrVer=$mpfrVer
          echo "GCC $gccVer" > ${{ github.workspace }}-VERSIONS.txt
          echo "GMP $gmpVer" >> ${{ github.workspace }}-VERSIONS.txt
          echo "MPC $mpcVer" >> ${{ github.workspace }}-VERSIONS.txt
          echo "MPFR $mpfrVer" >> ${{ github.workspace }}-VERSIONS.txt

      - name: "💛 Upload to Release"
        id: upload_to_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.jed
            *.bit
            *.log
          body_path: ${{ github.workspace }}-VERSIONS.txt
