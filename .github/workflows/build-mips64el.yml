---
name: "Build mips64el"

env:
  sample: mips64-unknown-linux-gnu
  CONFIGURATION: "repos.json"
  #OUT_DIR: "out"

on:
  push:
    tags:
      - "v*-rev*"
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      sample: ${{ env.sample }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4

      - name: "😆 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Detect-versions:
    needs: [Set-repos, ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
    outputs:
      ctVer:   ${{ steps.detect-versions.outputs.ctVer }}
      gccVer:  ${{ steps.detect-versions.outputs.gccVer }}
      gmpVer:  ${{ steps.detect-versions.outputs.gmpVer }}
      mpcVer:  ${{ steps.detect-versions.outputs.mpcVer }}
      mpfrVer: ${{ steps.detect-versions.outputs.mpfrVer }}
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4
      - name: detect versions
        id: detect-versions
        uses: ./.github/workflows/s1-detect-versions.yml
        with:
          sample: >-
            [
              "${{ needs.Set-repos.outputs.sample }}"
            ]
          repos: "${{ needs.Set-repos.outputs.repos }}"

  Install-crosstool:
    if: ${{ 'fasle' == 'true' }}
    needs: [Set-repos, Detect-versions]
    strategy:
      max-parallel: 2
      fail-fast: false
    uses: ./.github/workflows/s2-install-crosstool-msys2.yml
    with:
      sample: >-
        [
          "${{ needs.Set-repos.outputs.sample }}"
        ]
      repos: "${{ needs.Set-repos.outputs.repos }}"

  Build-toolchain:
    if: ${{ 'fasle' == 'true' }}
    needs: [Set-repos, Detect-versions, Install-crosstool]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
    steps:
      - name: "😄 Checkout"
        uses: actions/checkout@v4
      - name: build toolchains in msys2
        id: build-toolchains-msys2
        uses: ./.github/workflows/s3-build-toolchains-msys2.yml
        with:
          samples: >-
            [
              "${{ needs.Set-repos.outputs.sample }}"
            ]
          repos: "${{ needs.Set-repos.outputs.repos }}"

  Release:
    needs: [Set-repos, Detect-versions, Build-toolchain]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
    steps:
      - name: generate release info
        env:
          ctVer:   ${{ needs.Detect-versions.outputs.ctVer }}
          gccVer:  ${{ needs.Detect-versions.outputs.gccVer }}
          gmpVer:  ${{ needs.Detect-versions.outputs.gmpVer }}
          mpcVer:  ${{ needs.Detect-versions.outputs.mpcVer }}
          mpfrVer: ${{ needs.Detect-versions.outputs.mpfrVer }}
        run:
          echo "::notice ctVer=$ctVer"
          echo "::notice gccVer=$gccVer"
          echo "::notice gmpVer=$gmpVer"
          echo "::notice mpcVer=$mpcVer"
          echo "::notice mpfrVer=$mpfrVer
          echo "GCC $gccVer" > ${{ github.workspace }}-VERSIONS.txt
          echo "GMP $gmpVer" >> ${{ github.workspace }}-VERSIONS.txt
          echo "MPC $mpcVer" >> ${{ github.workspace }}-VERSIONS.txt
          echo "MPFR $mpfrVer" >> ${{ github.workspace }}-VERSIONS.txt

      - name: "💛 Upload to Release"
        id: upload_to_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.jed
            *.bit
            *.log
          body_path: ${{ github.workspace }}-VERSIONS.txt
