---
name: Build toolchains

on:
  workflow_call:
    inputs:
      samples:
        description: Stringified JSON list of samples
        required: true
        type: string
      canadian-cross:
        description: Build Canadian Cross toolchain(x86_64-w64-mingw32)
        default: false
        required: false
        type: boolean

jobs:
  build:
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        host: ["windows-2022"]
        sys: ["MSYS"]
        sample: ${{ fromJSON(inputs.samples) }}
        exclude:
          # Exclude both glibc & uClibc ARC Linux toolchains as
          # there's no known use of ARC Linux toolchains on Mac,
          # and anyway glibc fails to build for ARC700,
          # see https://github.com/crosstool-ng/crosstool-ng/pull/1456#issuecomment-779150246
          - {host: "macos-12", sample: "arc-multilib-linux-gnu"}
          - {host: "macos-12", sample: "arc-multilib-linux-uclibc"}

          # Exclude mips*-*-linux-gnu because of <byteswap.h> usage in
          # elf-entry.c for linux kernel headers.  <byteswap.h> is a GNU
          # extension and doesn't exist on MacOS X
          - {host: "macos-12", sample: "mips-unknown-linux-gnu"}
          - {host: "macos-12", sample: "mips64-unknown-linux-gnu"}

          # Exclude x86_64-w64-mingw32,x86_64-pc-linux-gnu because it crashes on m4 build with
          # a Segmentation fault
          - {host: "macos-12", sample: "x86_64-w64-mingw32,x86_64-pc-linux-gnu"}
    steps:
      - name: "prereq MSYS2"
        if: ${{ runner.os == 'Windows' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          install: >-
            base-devel msys2-runtime-devel autotools intltool libtool gcc bison flex gperf help2man meson ninja texinfo patch unzip
            autoconf-archive gettext-devel ncurses-devel
          path-type: inherit
      - name: "prereq Windows"
        if: ${{ runner.os == 'Windows' }}
        run: |
          git config --global core.autocrlf input
          cd ..
          fsutil file SetCaseSensitiveInfo crosstool-ng-msys2-builds enable
          cd crosstool-ng-msys2-builds
      - name: Update environment variables
        # See:
        #   - On Bazel cache: https://docs.bazel.build/versions/master/output_directories.html
        #   - On problems with `tar.exe`: https://github.com/actions/toolkit/issues/632
        #   - For symlinking: https://www.joshkel.com/2018/01/18/symlinks-in-windows/
        run: |
          echo "PATH=C:\msys64\usr\bin:$env:GITHUB_WORKSPACE\.local\bin:$env:PATH" >> $env:GITHUB_ENV
          echo "MSYS=winsymlinks:native" >> $env:GITHUB_ENV
          echo "MSYS_NO_PATHCONV=" >> $env:GITHUB_ENV
          echo "MSYS2_ARG_CONV_EXCL='*'" >> $env:GITHUB_ENV
      - name: Inspect environment variables
        run: env
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: download ct-ng
        uses: actions/download-artifact@v4
        with:
          name: crosstool.${{ matrix.host }}
      - name: extract ct-ng
        shell: msys2 {0}
        run: |
          tar -xvf ct-ng.tar
      - name: download tarballs
        uses: actions/cache/restore@v4
        with:
          path: src.tar
          key: src.tar-${{ hashFiles('.local/share/crosstool-ng/packages') }}-${{ hashFiles('.local/share/crosstool-ng/samples') }}
      - name: extract tarballs
        shell: msys2 {0}
        continue-on-error: true
        run: |
          tar -xvf src.tar
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: msys2 {0}
        run: |
          echo "workspace="$(cygpath '${{ github.workspace }}')"" >> "$GITHUB_OUTPUT"
      - name: patch ct-ng
        shell: msys2 {0}
        run: |
          cp -vrf samples                    .local/share/crosstool-ng/samples
          cp -vf packages/zstd/1.5.6/*.patch .local/share/crosstool-ng/packages/zstd/1.5.6/.
          cp -vf packages/gmp/*.sh           .local/share/crosstool-ng/scripts/build/companion_libs/.
      - name: download x86_64-w64-mingw32.${{ matrix.host }} tarball
        if: ${{ inputs.canadian-cross }}
        uses: actions/download-artifact@v4
        with:
          name: x86_64-w64-mingw32.${{ matrix.host }}.tar
      - name: install x86_64-w64-mingw32.${{ matrix.host }} toolchain
        shell: msys2 {0}
        if: ${{ inputs.canadian-cross }}
        run: |
          mkdir -p ${{ steps.strings.outputs.workspace }}/x86_64-w64-mingw32
          tar -C ${{ steps.strings.outputs.workspace }}/x86_64-w64-mingw32 \
              -xf x86_64-w64-mingw32.${{ matrix.host }}.tar
          echo "${{ steps.strings.outputs.workspace }}/x86_64-w64-mingw32/bin" >> "$GITHUB_PATH"
      - name: build ${{ matrix.sample }} for ${{ matrix.host }}
        shell: msys2 {0}
        run: |
          env
          mkdir -p src
          ct-ng ${{ matrix.sample }}
          sed -i -e '/CT_LOG_PROGRESS_BAR/s/y$/n/' .config
          sed -i -e '/CT_LOCAL_TARBALLS_DIR/s/HOME/CT_TOP_DIR/' .config
          sed -i -e '/CT_PREFIX_DIR/s/HOME/CT_TOP_DIR/' .config
          sed -i -e '/CT_GLIBC_ENABLE_DEBUG/s/y$/n/' .config
          test ${{ matrix.host }} = "macos-12" && sed -i -e '/CT_GDB_CROSS_PYTHON/s/y$/n/' .config
          ct-ng build
      - name: create ${{ matrix.sample }}.${{ matrix.host }} tarball
        shell: msys2 {0}
        if: ${{ matrix.sample == 'aarch64-unknown-linux-gnu' }}
        run: |
          cp -vrf /usr/bin/msys-2.0.dll ${{ steps.strings.outputs.workspace }}/x-tools/${{ matrix.sample }}/bin/.
          tar -C ${{ steps.strings.outputs.workspace }}/x-tools/${{ matrix.sample }} \
              -cf ${{ matrix.sample }}.${{ matrix.host }}.tar .
      - name: upload ${{ matrix.sample }}.${{ matrix.host }} tarball
        if: ${{ matrix.sample == 'aarch64-unknown-linux-gnu' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.sample }}.${{ matrix.host }}.tar
          path: |
            ${{ matrix.sample }}.${{ matrix.host }}.tar
      - name: upload log
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.sample }}.${{ matrix.host }}.log
          path: |
            build.log
            .config
        if: ${{ always() }}
